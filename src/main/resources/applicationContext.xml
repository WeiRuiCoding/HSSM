<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.li">
		<!-- 去除由Springmvc负责扫描的注解 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<!-- 配置数据源 -->
	<!--加载静态数据库配置资源-->
	<bean id="propertyPlaceHolderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:db.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置DataSource -->
	<!-- 使用连接池 Druid -->

	<bean id="poolDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		  init-method="init" destroy-method="close">
		<!-- 基本属性 -->
		<property name="username" value="${jdbc.username}">
		</property>
		<property name="password" value="${jdbc.password}">
		</property>
		<property name="driverClassName" value="${jdbc.driverClassName}">
		</property>
		<property name="url" value="${jdbc.url}">
		</property>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="3" />
		<property name="minIdle" value="3" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="20" />
	</bean>
	<!-- 配置Mybatis -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--指定mybatis全局配置文件-->
		<property name="configLocation" value="classpath:mybatis-config.xml">

		</property>
		<!-- 配置数据源 -->
		<property name="dataSource" ref="poolDataSource">

		</property>

		<!-- 指定mybatis，mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml">

		</property>


		<!--helperDialect=mysql  &lt;!&ndash;配置数据库&ndash;&gt;-->
		<!--reasonable=true  &lt;!&ndash;分页合理化&ndash;&gt;-->
		<!--supportMethodsArguments=true &lt;!&ndash;支持通过 Mapper 接口参数来传递分页参数&ndash;&gt;-->
		<!--params=count=countSql  &lt;!&ndash;为了支持startPage(Object params)方法&ndash;&gt;-->
		<!--autoRuntimeDialect=true &lt;!&ndash;允许在运行时根据多数据源自动识别对应方言的分页&ndash;&gt;-->
		<!-- 配置PageHelper -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							helperDialect=mysql
							reasonable=true
							supportMethodsArguments=true
							params=count=countSql
							autoRuntimeDialect=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!--配置扫描器，将mybatis接口的实现加入到IOC容器中-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.li.dao"></property>
	</bean>

	<!--配置sqlSession-->
	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSession"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!--事务控制的配置-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--控制住数据源-->
		<property name="dataSource" ref="poolDataSource" />
	</bean>

	<aop:config>
		<!--切入点表达式-->
		<aop:pointcut id="serviceMethod"
					  expression="execution(* com.li.service..*(..))" />
		<!--配置事务增强-->
		<aop:advisor pointcut-ref="serviceMethod" advice-ref="txadvice" />
	</aop:config>

	<!--开启基于注解的事务，使用xml配置形式的事务-->
	<tx:advice id="txadvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!--所有方法都是事务方法-->
			<tx:method name="*"></tx:method>
			<!--以get开始的所有方法-->
			<tx:method name="get*"></tx:method>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="edit*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"
				rollback-for="Exception" />
			<tx:method name="list*" propagation="REQUIRED"
				rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!--Spring配置文件的作用：配置数据源、整合Mybatis、事务控制-->
</beans>
